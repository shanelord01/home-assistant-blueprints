blueprint:
  name: Actron Que - Auto Fan Override on Overheat
  description: >
    In colder seasons, switch Actron Que system to 'fan_only' mode if upstairs zones 
    overheat during heating. Automatically revert when temps stabilize.
  domain: automation
  input:
    main_controller:
      name: Main Controller Entity
      selector:
        entity:
          domain: climate
    upstairs_zones:
      name: Upstairs Climate Zones
      selector:
        entity:
          multiple: true
          domain: climate
    all_zones:
      name: All Zone Entities
      selector:
        entity:
          multiple: true
          domain: climate
    season_sensor:
      name: Season Sensor (e.g. sensor.season)
      selector:
        entity:
          domain: sensor
    allowed_seasons:
      name: Allowed Seasons (trigger only in these)
      default:
        - winter
        - autumn
      selector:
        select:
          multiple: true
          options:
            - spring
            - summer
            - autumn
            - winter
    temp_threshold:
      name: Temp Overheat Threshold (째C above setpoint)
      default: 2
      selector:
        number:
          min: 0.5
          max: 5
          step: 0.5
          unit_of_measurement: 째C
    override_flag:
      name: Input Boolean - Temp Override Active
      selector:
        entity:
          domain: input_boolean
    active_zones_text:
      name: Input Text - Active Zones Storage
      selector:
        entity:
          domain: input_text
    enable_logging:
      name: Enable Logging (Notifications in Trace)
      default: false
      selector:
        boolean:

trigger:
  - platform: template
    value_template: >
      {% set setpoint = state_attr('!input main_controller', 'temperature') | float %}
      {% set zones = !input upstairs_zones %}
      {% set overheated = zones | select('is_state_not', 'off')
                                 | selectattr('attributes.current_temperature', 'defined')
                                 | selectattr('attributes.current_temperature', '>', setpoint + (!input temp_threshold | float))
                                 | list | count > 0 %}
      {{ overheated }}
  - platform: time_pattern
    minutes: "/5"

condition:
  - condition: template
    value_template: >
      {{ states('!input season_sensor') in !input allowed_seasons }}

action:
  - variables:
      all_zones: !input all_zones
      logging_enabled: !input enable_logging

  - choose:
      - conditions:
          - condition: state
            entity_id: !input override_flag
            state: 'off'
          - condition: state
            entity_id: !input main_controller
            state: 'heat'
          - condition: template
            value_template: >
              {{ state_attr(!input main_controller, 'hvac_action') == 'heating' }}
          - condition: template
            value_template: >
              {% set setpoint = state_attr(!input main_controller, 'temperature') | float %}
              {% set overheated = !input upstairs_zones | selectattr('state', 'ne', 'off')
                                                | selectattr('attributes.current_temperature', 'defined')
                                                | selectattr('attributes.current_temperature', '>', setpoint + (!input temp_threshold | float))
                                                | list | count > 0 %}
              {{ overheated }}
        sequence:
          - if:
              - condition: template
                value_template: "{{ logging_enabled }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "Actron Override Triggered"
                  message: "Upstairs zone exceeded {{ state_attr(!input main_controller, 'temperature') + (!input temp_threshold | float) }}째C. Switching all zones to fan-only."
          - variables:
              active_zones: >
                {{ all_zones | select('is_state', 'heat') | list }}
          - service: input_text.set_value
            data:
              entity_id: !input active_zones_text
              value: "{{ active_zones | join(',') }}"
          - service: input_boolean.turn_on
            target:
              entity_id: !input override_flag
          - repeat:
              for_each: "{{ all_zones }}"
              sequence:
                - service: climate.set_hvac_mode
                  data:
                    hvac_mode: fan_only
                  target:
                    entity_id: "{{ repeat.item }}"

      - conditions:
          - condition: state
            entity_id: !input override_flag
            state: 'on'
          - condition: template
            value_template: >
              {% set setpoint = state_attr(!input main_controller, 'temperature') | float %}
              {% set max_temp = !input upstairs_zones | map('state_attr', 'current_temperature')
                                               | select('defined')
                                               | map('float')
                                               | max(default=0) %}
              {{ max_temp <= setpoint + 1 }}
        sequence:
          - if:
              - condition: template
                value_template: "{{ logging_enabled }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "Actron Reversion Triggered"
                  message: "Upstairs zones have cooled below {{ state_attr(!input main_controller, 'temperature') + 1 }}째C. Restoring original heat zones."
          - variables:
              zone_str: "{{ states[active_zones_text] }}"
              zone_list: >
                {{ zone_str.split(',') if zone_str else [] }}
          - repeat:
              for_each: "{{ zone_list }}"
              sequence:
                - service: climate.set_hvac_mode
                  data:
                    hvac_mode: heat
                  target:
                    entity_id: "{{ repeat.item.strip() }}"
          - service: input_boolean.turn_off
            target:
              entity_id: !input override_flag

mode: restart
